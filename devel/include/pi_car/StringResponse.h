// Generated by gencpp from file pi_car/StringResponse.msg
// DO NOT EDIT!


#ifndef PI_CAR_MESSAGE_STRINGRESPONSE_H
#define PI_CAR_MESSAGE_STRINGRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pi_car
{
template <class ContainerAllocator>
struct StringResponse_
{
  typedef StringResponse_<ContainerAllocator> Type;

  StringResponse_()
    : output()  {
    }
  StringResponse_(const ContainerAllocator& _alloc)
    : output(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _output_type;
  _output_type output;





  typedef boost::shared_ptr< ::pi_car::StringResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pi_car::StringResponse_<ContainerAllocator> const> ConstPtr;

}; // struct StringResponse_

typedef ::pi_car::StringResponse_<std::allocator<void> > StringResponse;

typedef boost::shared_ptr< ::pi_car::StringResponse > StringResponsePtr;
typedef boost::shared_ptr< ::pi_car::StringResponse const> StringResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pi_car::StringResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pi_car::StringResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pi_car::StringResponse_<ContainerAllocator1> & lhs, const ::pi_car::StringResponse_<ContainerAllocator2> & rhs)
{
  return lhs.output == rhs.output;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pi_car::StringResponse_<ContainerAllocator1> & lhs, const ::pi_car::StringResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pi_car

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pi_car::StringResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pi_car::StringResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pi_car::StringResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pi_car::StringResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pi_car::StringResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pi_car::StringResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pi_car::StringResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0825d95fdfa2c8f4bbb4e9c74bccd3fd";
  }

  static const char* value(const ::pi_car::StringResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0825d95fdfa2c8f4ULL;
  static const uint64_t static_value2 = 0xbbb4e9c74bccd3fdULL;
};

template<class ContainerAllocator>
struct DataType< ::pi_car::StringResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pi_car/StringResponse";
  }

  static const char* value(const ::pi_car::StringResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pi_car::StringResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string output\n"
;
  }

  static const char* value(const ::pi_car::StringResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pi_car::StringResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StringResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pi_car::StringResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pi_car::StringResponse_<ContainerAllocator>& v)
  {
    s << indent << "output: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.output);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PI_CAR_MESSAGE_STRINGRESPONSE_H
