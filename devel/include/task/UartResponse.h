// Generated by gencpp from file task/UartResponse.msg
// DO NOT EDIT!


#ifndef TASK_MESSAGE_UARTRESPONSE_H
#define TASK_MESSAGE_UARTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace task
{
template <class ContainerAllocator>
struct UartResponse_
{
  typedef UartResponse_<ContainerAllocator> Type;

  UartResponse_()
    : sendmsg()  {
    }
  UartResponse_(const ContainerAllocator& _alloc)
    : sendmsg(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sendmsg_type;
  _sendmsg_type sendmsg;





  typedef boost::shared_ptr< ::task::UartResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task::UartResponse_<ContainerAllocator> const> ConstPtr;

}; // struct UartResponse_

typedef ::task::UartResponse_<std::allocator<void> > UartResponse;

typedef boost::shared_ptr< ::task::UartResponse > UartResponsePtr;
typedef boost::shared_ptr< ::task::UartResponse const> UartResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task::UartResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task::UartResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::task::UartResponse_<ContainerAllocator1> & lhs, const ::task::UartResponse_<ContainerAllocator2> & rhs)
{
  return lhs.sendmsg == rhs.sendmsg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::task::UartResponse_<ContainerAllocator1> & lhs, const ::task::UartResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace task

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::task::UartResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task::UartResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task::UartResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task::UartResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task::UartResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task::UartResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task::UartResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb965b9e1233f78a793fd9c6682a7c68";
  }

  static const char* value(const ::task::UartResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb965b9e1233f78aULL;
  static const uint64_t static_value2 = 0x793fd9c6682a7c68ULL;
};

template<class ContainerAllocator>
struct DataType< ::task::UartResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task/UartResponse";
  }

  static const char* value(const ::task::UartResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task::UartResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string sendmsg\n"
;
  }

  static const char* value(const ::task::UartResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task::UartResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sendmsg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UartResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task::UartResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task::UartResponse_<ContainerAllocator>& v)
  {
    s << indent << "sendmsg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sendmsg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK_MESSAGE_UARTRESPONSE_H
