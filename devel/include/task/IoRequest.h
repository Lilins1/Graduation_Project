// Generated by gencpp from file task/IoRequest.msg
// DO NOT EDIT!


#ifndef TASK_MESSAGE_IOREQUEST_H
#define TASK_MESSAGE_IOREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace task
{
template <class ContainerAllocator>
struct IoRequest_
{
  typedef IoRequest_<ContainerAllocator> Type;

  IoRequest_()
    : set_state(false)  {
    }
  IoRequest_(const ContainerAllocator& _alloc)
    : set_state(false)  {
  (void)_alloc;
    }



   typedef uint8_t _set_state_type;
  _set_state_type set_state;





  typedef boost::shared_ptr< ::task::IoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task::IoRequest_<ContainerAllocator> const> ConstPtr;

}; // struct IoRequest_

typedef ::task::IoRequest_<std::allocator<void> > IoRequest;

typedef boost::shared_ptr< ::task::IoRequest > IoRequestPtr;
typedef boost::shared_ptr< ::task::IoRequest const> IoRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task::IoRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task::IoRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::task::IoRequest_<ContainerAllocator1> & lhs, const ::task::IoRequest_<ContainerAllocator2> & rhs)
{
  return lhs.set_state == rhs.set_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::task::IoRequest_<ContainerAllocator1> & lhs, const ::task::IoRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace task

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::task::IoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task::IoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task::IoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task::IoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task::IoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task::IoRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task::IoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ca4c1ce228d4890d41f38bff165f1e8";
  }

  static const char* value(const ::task::IoRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ca4c1ce228d4890ULL;
  static const uint64_t static_value2 = 0xd41f38bff165f1e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::task::IoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task/IoRequest";
  }

  static const char* value(const ::task::IoRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task::IoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool set_state\n"
;
  }

  static const char* value(const ::task::IoRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task::IoRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.set_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IoRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task::IoRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task::IoRequest_<ContainerAllocator>& v)
  {
    s << indent << "set_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK_MESSAGE_IOREQUEST_H
